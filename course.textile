---
layout: post
title: "The course guide"
category: info
linktext:  "course guide"
standfirst:
---
Here at Collective Academy, we are extraordinarily excited about offering this course. If you have accepted a place, we hope you get as much from participating in it as we are going to.

<dl>
  
dt. Workload

dd. This is a very demanding full-time six-week course that covers a lot of material in a very short space of time and requires a very high level of commitment. It is probably not suitable for someone who has any other significant commitments, especially if they have no previous programming experience.

dt. Before you start

dd. After you have accepted a place, we will provide you with some exercises to help get you started. These are not compulsory and are not a prerequisite for taking the course, but they will cover material that will be very helpful once we get started.

dt. Location

dd. This course is taking place at Collective Academy, where we will have our own classroom on the first floor of "C/159":http://camdencollective.co.uk/159-2/ on Camden High Street, two minutes walk from Camden Town tube station.


dd. If you have any questions, you should contact the course tutor, who will be happy to discuss any aspect of the course with you.

dt. Timetable

dd. The Academy is open Monday to Friday. The day officially starts at 9.30am with a study planning meeting. We recommend you get in well before then. Reviews and presentations are at 4.30pm. The day normally ends by 6pm.

dt. Curriculum

dd. The first part of the course is made up of a core curriculum made up of a variety of structured online exercises. The second part of the course consists of a series of open-ended challenges and programming projects.

dt. Equipment

dd. We can provide you with all the equipment you need, but if you have a laptop computer, then we recommend that you bring it.

dd. Aside from a computer, headphones are perhaps the most important tool you will need (we can provide some, if you do not have a pair). You will need them for listening to lecture material, but you might also want to get yourself a Spotify or Google Play account and make some playlists for when you are not listening to lectures and do not want to be disturbed. 

dd. But, remember to strike a balance. You will be spending a good part of your day pair programming, doing code reviews, working in groups and discussing your work with others.

dt. The flipped classroom

dd. Any lectures that we use will be delivered using online material that each student can follow at their own speed. The role of the course tutor is to set the curriculum, to make sure that you have everything you need, to provide expert advice and to support you throughout the course.

dt. Working together

dd. You are encouraged to work together on problems. If you do not understand something, ask a fellow student for help. If somebody asks you for help with a problem, offer to pair program with them for a bit. Always start by giving them time to explain their understanding of the problem. Often just the act of explaining a problem can reveal the answer. Do not be too quick to provide what you think is the solution. Above all, treat another personâ€™s questions as a learning experience for both of you. If you have not tried it before, it is surprising how useful to your own understanding of a problem helping some somebody else with it can be.

dt.  Pair programming

dd. In pair programming, one person is at the keyboard typing code and the other is next to them discussing the problem as they work on it together. Paired sessions can last for a couple of minutes or several hours. 
  
dd. Pair programming is helpful because two people will together have fewer gaps in their knowledge than each of them separately, but just as importantly, talking about a problem as we are trying to solve it can have an extraordinary effect on our understanding of it. 

dd. If you are not used to studying or working collaboratively, it can take a while to get used to pairing. Embarrassment at not knowing something or fear of appearing stupid can get in the way. It's worth the trouble of overcoming those feelings. And if you do not suffer these doubts, pairing is a good opportunity to learn some humility: the problem has not been solved until two people have understood it and had a part in reaching a solution.

dd. Sometimes, even with two people, it is possible to get stuck. In that case, take a break. Have a cup of tea. Go for a walk. Do a bit of Google research or check Stack Overflow. Or close your eyes and try to visualise a solution. And then come back to the problem with a fresh perspective and some new ideas.
  
dd. Perhaps you might find pairing with one person particularly productive, but make a point of pairing, at different times, with everyone in the room. It's a great way of getting a different point of view and seeing how different people think about a problem.

dd. Pairing is productive, but exhausting. When you have had enough, feel free to put your headphones back on and return to working on your own for a while.

dt. Code reviews

dd. A code review is when two or more people look at and discuss a piece of code together after it has been written. 

dd. Code reviews can be useful when two people have been working on the same--or different parts of a--problem and they want to compare their solutions. Very often (actually, always) a solution to a problem can be coded in multiple ways. There is always more than one way to do it. A solution might be elegant or easy to understand or short or quick to run or it might use a particularly satisfying idiom, but it usually isn't all of those things at once. Every piece of code that gives the expected output is doing something right.
  
dd. Code reviews usually happen when you have finished working on a piece of code and want feedback on your solution. As with pair programming, explaining your code and discussing your design choices with one or more people can deepen your understanding of the problem and give you valuable insights. Code reviews are useful for the reviewers, too, because it cultivates the ability to read other people's code, which as a programmer you can never do too much of.

dd. Unlike pair programming, code reviews can involve more than two people, they do not often last very long and the reviewer does not usually get involved in the coding of a solution.

dt. Pacing

dd. The pace at which we get through the core curriculum will depend on the pace of the whole group. In order to get the most out of the second part of the course, it is important that every member of the group has some familiarity with the material. So, if you find you are getting through the material faster than others, use some of your time to deepen your knowledge of topics you have already covered by pairing up with somebody who is still working through it for the first time.

dt. Self-organising study

dd. In the latter part of the course we are going to be spending more time on some open-ended challenges. Some of these will be provided by our partners, our sponsors and by Collective members.

dd. We encourage you to organise yourselves for each challenge into small groups of three or four and to divide up tasks between you.

dd. Change the composition of the groups for each new challenge. And allow the free flow of information between groups. You are welcome to make contributions to the work of other groups or go and find out what they are working on.

dd. Many of the challenges are somewhat open-ended, are provided without a lot of guidance and are likely to require a fair amount of research as well as hands-on development.

dd. We also encourage you to think about problems that you would like to propose yourself. Towards the end of the course, there will be time to work in groups on a project of your own choosing.

dd. You do not have to bring your own project to work on and in some ways it is better if the projects emerge out of discussions between course participants, so that everyone on a project is equally committed to it. 

dd. Each challenge and each project will end with presentations and demonstrations.

dt. Blogging

dd. We encourage you to blog and vlog regularly about your experiences on this course. It will provide us and prospective students with valuable feedback.

dt. Etiquette

dd. Treat everyone at Collective with kindness and respect. Do not make remarks that are likely to be offensive to others. No subtle sexism (or any "isms", for that matter). Do not put other people down. Do not attempt to justify yourself when your behaviour is challenged, just apologise and move on. 

dd. Here are some put-downs to avoid: No feigning surprise, like _"What?! I can't believe you don't know that?"_. No _"Well-actually"_s, as in _"Well, actually, that's not the way you do it"_. No offering advice that hasn't been asked for.

dt. Nourishment

dd. We have access to a kitchen, but we need to provide our own refreshments. It might be a good idea to establish a kitty and get some provisions in.

dt. Heating

dd. C/159 does not have central heating, so although there is some heating, dress warmly, just in case.

dt. Health

dd. When working at a computer, it is very easy to forget to look after yourself. Remember to take a short break every 20 minutes or so. Lean back in your chair. Place the palm of your hands on your eyes or slowly turn your head around and focus your eyes in the middle distance or out of the window for 20 seconds. At least every hour, go for a walk and stretch your legs.

</dl>







