---
layout: post
title: "Coding the web: syllabus"
category: info
linktext: syllabus
standfirst: 
---

h3. Draft

h2. Inspiration: 
* "Hacker School":https://www.hackerschool.com/
* "Self-organised Learning Environments":http://www.youtube.com/watch?v=SiGbfhnvT4Q *

( &#42; OK. I know these are primary school kids, but the idea of learning in loosely-coupled groups using very broadly defined tasks that stretch students' knowledge without offering them much help or guidance looks to be broadly applicable.)

h2. Thoughts about structure

The course divides into three separate components: highly-structured online course material; one-day group challenges ("hack days"); and the final project.

These components could easily be delivered separately, so that the core online material could be studied part-time over the course of several weeks with regular weekly meetups for support; the challenges could be organised as one-day "hack days", and the final project could be organised as a weekend hackathon.

h2. A note about pacing

I may be out with the pace of the core curriculum. If this turns out to be the case, we may have to do fewer challenges and a shorter final project. We will just have to play it by ear.

h2. Mentoring

I am very keen to get the challenges mentored by companies that have software interfaces which they are keen for developers to work with. There are likely to be many candidate companies in London, aside from the obvious ones like, Google, Facebook and Twitter. There may be startups already in Collective that have an API that they would like us to try out.

The general idea would be for a company to set a challenge at the start of the day (possibly by video) and then they would send a mentor to join the class at the end of the day to work with the students, see presentations and offer feedback.

h2. Prerequisites:
* "Codecademy: Web projects":http://www.codecademy.com/tracks/projects
* "Codecademy: Web Fundamentals":http://www.codecademy.com/tracks/web
* "Codecademy: jQuery":http://www.codecademy.com/tracks/jquery
* "Codecademy: Javascript":http://www.codecademy.com/tracks/javascript

(Actually, this stuff can be picked up during the course and is not necessary for the first part of it, but it will be better if students have some familiarity with this material and if they have not got the basics of HTML, CSS, Javascript and JQuery by the time we start work on the challenges, they will be at a serious disadvantage)

h2. Weeks 1-3: Core curriculum

* "Udacity: Introduction to Computer Science":https://www.udacity.com/course/cs101
* "Udacity: Web Development":https://www.udacity.com/course/cs253

h2. Weeks 4 & 5: Group challenges

Once the core curriculum has been covered, the course consists of a series of one-day challenges. (Almost) all the projects would be expected to involve demonstrations of working code.

h3. Some proposed challenges

* PivotalTracker. Any use? (no code needed for this one)
* Blueprint or Foundation?
* Do some interesting things with the Facebook API.
* Do some interesting things with the Twitter API.
* Add as many different third-party login services as you can to your AppEngine blog.
* Find a JSON dataset of at least 1,000 records and load it into the browser using Ajax. Use underscore.js to filter it. 
* Do something interesting with the Google maps API.
* Angular or Backbone?
* Set up an advertising campaign for your site
* Who built JSLint and why? How and when would you use it? 
* Which programming language "miraculously combined functions as first class objects with lexical closures and dynamic objects with prototypal inheritance?" Demonstrate the usefulness of these two features.
* Find out about some functional programming idioms in Python and see if you can refactor any of your backend code using these idioms. Was it worth it?
* Create a new course on Codecademy on a topic of your choice.

I will probably use Matthew Russell's book, "_Mining the Social Web_":http://www.amazon.co.uk/Mining-Social-Web-Facebook-LinkedIn-ebook/dp/B00FNBWNLU/ as a reference for some of the challenges.

Every time we run the course, we throw out the three or four least-liked projects and replace them with new ones.

h2. Week 6: Group project

In the final week, everyone is expected to work together on a group project.



