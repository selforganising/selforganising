---
layout: post
title: "Notes about web technology choices"
standfirst: "As we get ready for the first <em>Coding the web</em> course, I have been thinking a bit about different technology choices for web sites. Here is a summary."
author: DS
---
*PHP* is a language designed exclusively for building websites that has for many years been the default server-side language for countless small websites, many of which have (like Wikipedia) grown very large. It is more-or-less ubiquitous on most hosting services. On web sites made up of conventional pages, it is very good for adding simple server-side behaviour, and can be used for more complex applications, too. WordPress, which is by a wide margin the most popular software for managing websites, is written in PHP, as is Drupal (another widely-used CMS) and much of Facebook. However, PHP "does have its critics":http://www.codinghorror.com/blog/2012/06/the-php-singularity.html.

*Ruby on Rails* is a web application framework that can be used for websites which are structured around many pages that broadly reflect the structure of some underlying content, such as a code repository (GitHub) or a business directory (Yellow Pages) or a social network (Yammer) or a digital library (Scribd) or an online store (Shopify) or a project management tool (Basecamp). There are a lot of websites that answer to this broad description, which has led to Rails becoming a widely-used framework for building these sorts of websites. "Rails is less appropriate":http://www.confreaks.com/videos/359-gogaruco2010-rails-is-obsolete-but-so-s-everything-else for a single-page web application (of which there are an increasing number) that updates itself without loading a new page (such as GMail, Google Instant search or the front page of Twitter).

*Node.js* is a software platform for building network applications that is likely to be a good choice where data is being collected and published in a potentially continuous stream, such as for online chat or multi-user gaming. It is good for single-page web applications and for working with data APIs. It has the advantage of being written in JavaScript, the lingua franca of the Web. Node.js is a "platform", not a "framework", so it offers fewer higher-level abstractions than, say, Rails and generally requires more development effort in contexts where a framework might be suitable. Node.js is now used by Linkedin, Yahoo, PayPal and a growing list of other online services.

*App Engine* is an application platform and hosting service (Platform as a Service or "PaaS") that is good for applications that do not necessarily fit into a conventional web content publishing model, such as content aggregating (TweetDeck) or data analysis (Guardian Open Platform) or online games (SongPop, PokeBuddy) or content sharing (SnapChat) or education (Khan Academy, Udacity), where content may be collected from a variety of different sources and delivered to users in a variety of different ways or where data is being collected from users as they interact with the application. App Engine integrates pretty nicely with a number of Google services, including data storage, search, email, authentication and caching, making it a plausible route for developing relatively complex web applications without having to worry too much about infrastructure. 

None of these technologies are exactly comparable and indeed PHP can be run on Google App Engine, so they are not mutually exclusive either, but they represent a range of plausible choices across a wide range of applications. 






